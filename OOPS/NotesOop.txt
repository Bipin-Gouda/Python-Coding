Q1. What Is Object-Oriented Programming in Python?

Object-oriented programming is a programming paradigm that provides a means of structuring programs so that properties and behaviors are
bundled into individual objects. (using a class we are able to give same properties to all objects of a class)

For instance, an object could represent a person with properties like a name, age, and address and behaviors such as walking, talking,
breathing, and running. Or it could represent an email with properties like a recipient list, subject, and body and behaviors like
adding attachments and sending.

*********************************************************************************************************************
Constructor -

def __init__(self):
The properties that all Class objects must have are defined in a method called .__init__(). Every time a new Class object is created,
 .__init__() sets the  initial state of the object by assigning the values of the object’s properties.
That is, .__init__() initializes each new instance of the class. eg

class Dog:
    def __init__(self, name, age):
        self.name = name 
        self.age = age

In the body of .__init__(), there are two statements using the self variable:

1. self.name = name   # creates an attribute called name and assigns to it the value of the name parameter.
2  self.age = age     # creates an attribute called age and assigns to it the value of the age parameter.

************************************************************************************************************************
Instance Attributes-
Attributes created in .__init__() are called instance attributes. An instance attribute’s value is specific to a particular instance of
the class. All Dog objects have a name and an age, but the values for the name and age attributes will vary depending on the Dog instance.

Class Attributes-
On the other hand, class attributes are attributes that have the same value for all class instances. You can define a class attribute by
assigning a value to a variable name outside of .__init__().

For example, the following Dog class has a class attribute called species with the value "Canis familiaris":

class Dog:
    # Class attribute
    species = "Canis familiaris"

    def __init__(self, name, age):
        self.name = name
        self.age = age

****************************************************************************************************************************
Creating a new object from a class is called instantiating an object. You can instantiate a new Dog object by typing the 
name of the class, followed by opening and closing parentheses:

eg Dog()

a=Dog()
b=Dog()

*****************************************************************************************************
Instance Methods-

Instance methods are functions that are defined inside a class and can only be called from an instance (instance => object  of the class)
of that class. Just like .__init__(), an instance method’s first parameter is always self.

class Dog:
    species = "Canis familiaris"

    def __init__(self, name, age):
        self.name = name
        self.age = age

    # Instance method
    def description(self):
        return f"{self.name} is {self.age} years old"

    # Another instance method
    def speak(self, sound):
        return f"{self.name} says {sound}"


This Dog class has two instance methods:

1. description()     # returns a string displaying the name and age of the dog.
2. speak()           # has one parameter called sound and returns a string containing the dog’s name and the sound the dog makes.

************************************************************************************************************************

Dunder methods - Special methods which start and end with __ 

eg 
1. def __init__(self,):           # constructor
2. def __str__(self,):            # returns a human-readable, or informal, string representation of an object. This method is called by the 
3. def __del__(self,):              built-in print() , str() , and format() functions.
4. def __format__(self,):         # If you don't define a __str__() method for a class, then the built-in object implementation calls 
5. def __new__(self,):                                     the __repr__() method instead
6. def __repr__(self,):

************************************************************************************************************************************

Inherit From Other Classes in Python

Inheritance is the process by which one class takes on the attributes and methods of another. Newly
 formed classes are called child classes, and the classes that child classes are derived from are called parent classes. eg

 class JackRussellTerrier(Dog):
    pass

# Creating a class for each dog breed inheriting from class Dog

**************************************************************************************************************************************

Overriding and Extending

Overriding - Changing the inherited attribute's values for the child class (giving new values)

Extending - Addinhg some extra functionalities , Information in the child class

***************************************************************************************************************************************